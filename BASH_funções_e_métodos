env: Lista todas as variáveis de ambiente

echo: Escreve na tela

echo -n: Print sem quebrar linha

echo $$: Exibe PID da sessão

echo $?: Informa se o ultimo comando teve sucesso ou não, sucesso == 0, fracasso !=0
hostname: Nome da máquina

uptime -p: Tempo que a máquina está ligada

comando > arquivo: Insere a saída de um comando anterior no arquivo 

&> : Saída padrão e de erro

blade; chmod +x blade: Utilizado para manipular permissões de um utilitário/ -x: remove

readonly: Váriavel somente leitura

read -p "texto" n: Exibe um texto e recebe uma entrada

ps u: Informa os processos que estão em execução

test $? -eq 0: -eq indica se são iguais [[ -eq ]]

[[-ne]]: not equals // teste == [[]]

[[ $numero -lt 5 ]]: menor que 5

[[ $numero -gt 5 ]]: maior que 5

[[ $numero -gt 5 ]]: menor ou igual 5

date: retorna a data de hoje com -> dia da semana, mês e dia, horário e ano

date +'%d'; dia do mês

date +'%d %B': dia e nome do mês d nome do mês

date +'%d %b': dia do mês e sigla do mês

date +'%d %m': dia do mês e número do mês

date +'%d %B %Y': dia do mês, nome do mês e ano. É possível por strings no meio

mv: mover [origem] [destino]

 -f não oferece confirmação para remoção.
 -i solicita confirmação para sobrescrever arquivos.
 -v mostra o nome dos arquivos movidos.
Exemplo:
# mv /root/agora /root/now
# mv arq1.txt arq1_old.txt

cat [opção] [arquivo ...]
 Imprime os arquivos sequencialmente na saída padrão
 -n numera as linhas na saída (inicia em cada arquivo em 1)
 -b numera apenas linhas com conteúdo na saída
 ...

 head [opção] [arquivo]
 Imprime as primeiras linhas de um arquivo (default é 10)
 -n quantidade de linhas a serem exibidas
 -c quantidade de bytes a serem exibidos
Exemplo:
# head –n 5 arquivoTeste1.txt
linha 1
linha 2
linha 3
linha 4
linha 5

tail [opção] [arquivo ...]
 Imprime as últimas linhas de um arquivo (default é 10)
 -n quantidade de linhas a serem exibidas
 -c quantidade de bytes a serem exibidos
 ...
Exemplo:
# tail –n 4 arquivoTeste1.txt
linha 27
linha 28
linha 29
linha 30

diff [opções] arquivos
 Compara arquivos linha a linha
 -i ignora diferenças de maiúsculas/minúsculas
 -e ignora diferenças por tabulação
 -w ignora todos os espaços em branco
 ...


grep [opção] [arquivo ...]
 Exibe as linhas de um arquivo ou de um stream de entrada que
correspondam a uma expressão
 -a Trata todos os arquivos como ASCII
 -c Conta quantas ocorrência existem da expressão
# grep Mensagem arquivoTeste1.txt
# ps –e | grep sh
less [opção] [arquivo ...]
 Imprime os arquivos sequencialmente uma página de cada vez
sem a necessidade de carrega-lo todo
 -bn ou –buffers=n Tamanho do buffer
 ...

tar
 Realiza o empacotamento de arquivos e diretórios em um único
arquivo
 -c Cria o novo arquivo com os itens especificados
 -r Adiciona novos elementos aos arquivo (apenas descompactado)
 -f Ler/escreve no arquivo especificado
 -x Extrai o arquivo para o disco
 -v Verboso
 -z Compacta o conteúdo com gzip
Exemplo:
# tar –cvf teste1.tar diretório_teste/
# tar –zcvf teste1.tar diretório_teste/

file [file]
 Descreve informação sobre o tipo do conteúdo do arquivo
 Exemplos:
# file /etc/fstab
/etc/fstab: ASCII text
# file /bin/cp
/bin/cp: ELF 64-bit LSB executabl

rm: remover arquivo

rm -r: remover diretorio

sudo rm -r: Arquivo ou diretório com proteção

 -f força a remoção dos arquivos
 -i solicita confirmação para remover os arquivos.
 -r remove os diretórios e seu conteúdo recursivamente.
 -v mostra o nome dos arquivos movidos.

cp: copiar de [origem] para [destino]
 -f sobrescreve os arquivos de destino caso existam
 -i solicita confirmação para sobrescrever arquivos
 -P preserva as permissões e informações de data e hora
 -R copia os diretórios recursivamente
 -d copia links simbólicos e não arquivos para onde apontam
Exemplo:
# cp –Rf /etc/sysconfig /home/backup
# cp arq1.txt arq1_copy.txt

export: define uma variavel para todo o sistema

ps -p $PPID: Indica pai do processo em execução

ps -p $$,$PPID: pai e filho

=~: Indica que é uma REGEX

fruta=("Banana" "Laranja" "Morango" "Uva"): declarar array

+=: Operador de atribuição//concatenna

id++, id--, ++id, --id: pós-acréscim e pós-decréscimo

-, +: menos e mais unário/ subtração e adição

!, ~: negação lógica e bit-a-bit

**: exponiação

*, /, %: multiplicação, divisão, restp da divisão

<<, >>: deslocamento bit-abit para esquerda, direita

<=, >=. <, > comparação

==, !=: igualdade, desigualdade

&:  And bit-a-bit

^: xor bit-a-bit

|: or bot-a-bit

&&: and lógico

||: or lógico

{expr ? expr : expr} : operador condicional

=, *=, /=, %=, +=, -=, <<=, >>=, &=, ^=, |= : atribuição

\: coloca no echo pra quebrar linhas

[[ ${#numero2} -lt 1 ]] && echo "Faltou passar um valor de operação" && exit 1

[[ ! $numero1 =~ ^[0-9]+$ ]] && echo "Foi passado algo diferente de um número no argumento 1" && exit 1

ls *.sh: Busca por um padrão especifico ignorando o que vem antes ou depois, dependendo da posição do *

echo Lucas{1..4} Lucas1 Lucas2 Lucas3 Lucas4

echo ${fruta^^}
FRUTA=MACA

echo a*.sh
al.sh array_associativo.sh
ls a*.sh
al.sh  array_associativo.sh

?: um único

*: zero ou mais

[]: lista de cacacteres válidos

echo *.??
al.sh array_associativo.sh builtin.sh condicionais.sh declaracao_atributos.sh entrada.sh operacoes_aritmeticas.sh saida.sh variavel.sh

echo v[a]*
variaveis variavel.sh
echo v[ar]*
variaveis variavel.sh

echo ???[a]*
array_associativo.sh

mkdir teste{1..5}
~ls
al.sh                 declaracao_atributos.sh       teste3
array_associativo.sh  declaracao_atributos.sh.save  teste4
builtin.sh            entrada.sh                    teste5
CB                    operacoes_aritmeticas.sh      variaveis
condicionais.save     saida.sh                      variavel.sh
condicionais.save.1   teste1
condicionais.sh       teste2
rm -r teste{1..5}

echo gta{1..6..2}
gta1 gta3 gta5

echo gta{1..6}
gta1 gta2 gta3 gta4 gta5 gta6

touch: modifica ou cria caso não exista

touch {ba,mor,car}anga.txt
baranga.txt moranga.txt caranga.txt

touch {b..f}anga.txt

IFS:Quebra linhas com base em caerta característica

echo {$fruta} informa a quantidade de caracteres do valor da variável

echo ${msg:3}
4hdkwo
echo ${msg:6}
kwo
echo ${msg}
1234hdkwo
echo ${msg: -6}
4hdkwo
echo ${msg:6: -2}
k
echo ${msg:-6: 2}
1234hdkwo
echo ${msg: -6:2}
4h

echo ${nome:-valor} // retorna valor se nome não tem valor
valor
echo ${nome:=valor}  // atribui valor a nome, se nome não tem valor
valor
echo ${nome:+carro}
carro
echo ${nome:?mensagem} // Retorna o valor de nome, caso contrário retorna a mensagem
valor

echo ${nome^}
Valor
echo ${nome^^}
VALOR
echo ${nome,}
valor
echo ${nome,,}
valor

echo ${frutas# } 
banana morango uva
echo ${frutas#* }//exibe a direita da primeira ocorrência
morango uva
echo ${frutas##* }//exibe a esquerda da primeira ocorrência
uva
echo ${frutas##*o}
uva
echo ${frutas#*o}
rango uva

echo ${frutas%%a*}//o fim da string será aparado até a primeira ocorrência do padrão de trás pra frente
b
echo ${frutas%a*}// o fim da string será aparado até a última ocorrência do padrão de aatrás pra frente
banana morango uv

echo ${mensagem/Windows/Linux} //subistitui uma string ou padrão de strings por outra
Use Linux e seja feliz
echo ${mensagem/W*s/Linux}
Use Linuxeja feliz
echo ${mensagem/W*a/Linux}
Use Linux feliz
echo ${mensagem/W*s/Linux}
Use Linuxeja feliz
echo ${mensagem//W*s/Linux}// subistitui todos
Use Linuxeja feliz
lucas@lucas-Inspiron-3583:~/Bash/Bash_Scripts$ echo ${mensagem//e/Linux}
UsLinux Windows Linux sLinuxja fLinuxliz
echo ${mensagem/W*s /Linux}
Use Linuxe seja feliz

for nome [in lista]; do comandos; done //olhar o .sh de for

>>: criar ou insere em um arquivo já criado

[[ ${#veriUrl} -lt ${#url} ]] && echo "Deu errado" && exit 1

Pressione CTRL+A para mover o cursor para o inicio da linha de comandos.

Pressione CTRL+E para mover o cursor para o fim da linha de comandos.

Pressione CTRL+U para apagar o que estiver à esquerda do cursor. O conteúdo apagado é copiado para uso com CTRL+y.

Pressione CTRL+K para apagar o que estiver à direita do cursor. O conteúdo apagado é copiado para uso com CTRL+y.

Pressione CTRL+L para limpar a tela e manter o texto que estiver sendo digitado na linha de comando (parecido com o comando clear).

Pressione CTRL+Y para colocar o texto que foi apagado na posição atual do cursor.

[a-z][0-9] - Faz referência a caracteres de a até z seguido de um caracter de 0 até 9.

[a,z][1,0] - Faz a referência aos caracteres a e z seguido de um caracter 1 ou 0 naquela posição.

[a-z,1,0] - Faz referência a intervalo de caracteres de a até z ou 1 ou 0 naquela posição.

Por exemplo [^abc] faz referência a qualquer caracter exceto a, b e c.

X{ab,01} - Faz referência a seqüencia de caracteres Xab ou X01

X{a-z,10} Faz referencia a seqüencia de caracteres Xa-z e X10.

touch criar um ou mais arquivos e suas respectivas extenções 
touch –t 201409161940 aniversario
